[{"/Users/selinamangaroo/Documents/Code/react-jsonschema-form-app/src/index.js":"1","/Users/selinamangaroo/Documents/Code/react-jsonschema-form-app/src/App.js":"2","/Users/selinamangaroo/Documents/Code/react-jsonschema-form-app/src/schema.js":"3","/Users/selinamangaroo/Documents/Code/react-jsonschema-form-app/src/uiSchema.js":"4","/Users/selinamangaroo/Documents/Code/react-jsonschema-form-app/src/Uploader.js":"5"},{"size":174,"mtime":1613751587465,"results":"6","hashOfConfig":"7"},{"size":3566,"mtime":1630615449793,"results":"8","hashOfConfig":"7"},{"size":2818,"mtime":1630615619008,"results":"9","hashOfConfig":"7"},{"size":1002,"mtime":1630615544973,"results":"10","hashOfConfig":"7"},{"size":6885,"mtime":1613669195260,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"uvppys",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"/Users/selinamangaroo/Documents/Code/react-jsonschema-form-app/src/index.js",[],["25","26"],"/Users/selinamangaroo/Documents/Code/react-jsonschema-form-app/src/App.js",["27","28","29","30"],"/Users/selinamangaroo/Documents/Code/react-jsonschema-form-app/src/schema.js",[],"/Users/selinamangaroo/Documents/Code/react-jsonschema-form-app/src/uiSchema.js",[],"/Users/selinamangaroo/Documents/Code/react-jsonschema-form-app/src/Uploader.js",["31","32","33","34","35","36","37","38","39","40"],"import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\n// import ProgressBar from 'react-bootstrap/ProgressBar';\n// import fileSize from \"filesize\";\nimport Dropzone from 'react-dropzone';\nconst tus = require(\"tus-js-client\");\n\nconst Uploader = (props) => {\n    const [filesSelected, setFilesSelected] = useState(0);\n    const [filesUploaded, setFilesUploaded] = useState(0);\n    const [paused, setPaused] = useState(false);\n    const [queue, setQueue] = useState([]);\n    const [recentList, setRecentList] = useState([]);\n    const [finishedFiles, setFinishedFiles] = useState([])\n    // const [connections, setConnections] = useState({});\n    // const [connectionIndex, setConnectionIndex] = useState(0);\n\n    const selectFiles = (e) => {\n        let q = [];\n        if (e.target) {  // From <input type=\"file\" ... />\n            q.push(...e.target.files);\n        } else {  // From dropzone\n            q.push(...e);\n        }\n        q = q.filter(f => f.size > 0);\n        setQueue(q);\n    }\n\n\n    const processQueue = () => {\n    // let q = queue;\n    console.log(\"queue in process\", queue);\n    \n    while(queue.length > 0){\n    \n        let file = queue.shift();\n        console.log('File:', file);\n        // if (!file) { continue; }\n        \n        // let connIndex = connectionIndex;\n\n        // Create a new tus upload\n        var upload = new tus.Upload(file, {\n            // Endpoint is the upload creation URL from your tus server\n            endpoint: \"https://master.tus.io/files/\",\n            // Retry delays will enable tus-js-client to automatically retry on errors\n            retryDelays: [0, 1000, 3000, 5000],\n            // Attach additional meta data about the file for the server\n            metadata: {\n                filename: file.name,\n                filetype: file.type\n            },\n            // Callback for errors which cannot be fixed using retries\n            onError: (error) => {\n                console.log(\"Failed because: \" + error)\n            },\n            // Callback for reporting upload progress\n            onProgress: (bytesUploaded, bytesTotal) => {\n                var percentage = (bytesUploaded / bytesTotal * 100).toFixed(2)\n                // if(connections[connIndex]) {\n                //     let conn = {...connections}\n                //     conn[connIndex]['totalBytes'] = bytesTotal;\n                //     conn[connIndex]['uploadedBytes'] = bytesUploaded;\n                //     setConnections(conn);\n                // }\n\n                console.log(bytesUploaded, bytesTotal, percentage + \"%\")\n            },\n            // Callback for once the upload is completed\n            onSuccess: () => {\n                // let conn = {...connections};\n\n                let numFiles = filesUploaded;\n                // delete conn[connIndex];\n\n                numFiles++;\n                setFilesUploaded(numFiles);\n                // setConnections(conn);\n\n                let uploads = [...finishedFiles];\n                uploads.push(file);\n                setFinishedFiles([...uploads]);\n\n                console.log(\"Download %s from %s\", upload.file.name, upload.url)\n            }\n        })\n\n        // Try to resume upload if possible\n        upload.findPreviousUploads().then((previousUploads) => {\n            if(previousUploads.length > 0) {\n                let resumable = previousUploads.pop();    // Grab last discontinued upload to resume\n                //console.log('Resuming download: ', resumable);\n                upload.resumeFromPreviousUpload(resumable);\n            }\n        });\n\n        // Add listeners for the pause and unpause button\n        var pauseButton = document.querySelector(\"#pauseButton\")\n        var unpauseButton = document.querySelector(\"#unpauseButton\")\n\n        pauseButton.addEventListener(\"click\", function () {\n            upload.abort();\n            console.log('paused');\n        })\n\n        unpauseButton.addEventListener(\"click\", function () {\n            upload.start();\n            console.log('unpaused');\n        })\n\n        // connections[connIndex] = {\n        //     upload: upload,\n        //     uploadUrl: null,\n        //     totalBytes: 0,\n        //     uploadedBytes: 0,\n        //     name: file.name,\n        // };\n\n        // let conIndex = connectionIndex;\n        // conIndex++;\n        \n        // Start the upload\n        upload.start();\n\n        // setConnectionIndex(conIndex);\n        // setConnections(connections);\n        \n        }\n    }\n    \n    if(queue.length > 0){\n        console.log('queue: ', queue);\n        processQueue();\n    }\n\n    // console.log('filesUploaded: ', filesUploaded);\n    // console.log('connections: ', connections);\n    // console.log('connectionIndex: ', connectionIndex);\n\n\n    // const pauseUploads = () => {\n    //     setPaused(true)\n    //     upload.abort();\n    // }\n\n    // const start = () => {\n    //     if(paused === true) {\n    //         resumeUploads();\n    //         return;\n    //     }\n    // }\n\n    // const resumeUploads = () => {\n    //     setPaused(false)\n    //     upload.start();\n    // }\n\n    return (\n        <div>\n            <div style={{backgroundColor: 'lightgrey', paddingLeft: '5px'}}>Import Files</div>\n            <Dropzone onDrop={acceptedFiles => {selectFiles(acceptedFiles); console.log('acceptedFiles', acceptedFiles);}}>\n                {({ getRootProps, getInputProps }) => (\n                    <section>\n                    <div {...getRootProps()}>\n                        <input {...getInputProps()} />\n                        <p>Drag 'n' drop some files here, or click to select files</p>\n                    </div>\n                    </section>\n                )}\n            </Dropzone>\n            <div className=\"col-md-2\">\n                <Button id='unpauseButton' variant=\"primary\">Start</Button>\n                <Button id='pauseButton' variant=\"outline-secondary\">Pause</Button>\n            </div>\n            <br/>\n            <div style={{backgroundColor: 'lightgrey', paddingLeft: '5px'}}>Selected Media</div>\n            <div className=\"row mt-3\">\n                <div className=\"col-md-11\">\n                    <UploadList uploads={finishedFiles}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst UploadList = (props)=> {\n\n    let items = [];\n    for(let i in props.uploads) {\n        items.push(<UploadItem key={i} item={props.uploads[i]} index={i}/>);\n    }\n    // console.log('items: ', items);\n    if(items.length > 0) {\n        return <div>\n            <h2>Uploading ({items.length})</h2>\n            {items}\n        </div>;\n    } else {\n        return <div></div>;\n    }\n}\n\nconst UploadItem = (props) => {\n    return(\n        <div className='row'>\n            <div className='col-md-9'>\n                {props.item.name}\n            </div>\n        </div>\n    )\n}\n\nexport default Uploader;\n",["41","42"],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":27,"nodeType":"49","messageId":"50","endLine":1,"endColumn":36},{"ruleId":"51","severity":1,"message":"52","line":53,"column":3,"nodeType":"53","messageId":"54","endLine":59,"endColumn":12},{"ruleId":"51","severity":1,"message":"52","line":60,"column":7,"nodeType":"53","messageId":"54","endLine":61,"endColumn":70},{"ruleId":"51","severity":1,"message":"52","line":63,"column":9,"nodeType":"53","messageId":"54","endLine":69,"endColumn":14},{"ruleId":"47","severity":1,"message":"55","line":9,"column":12,"nodeType":"49","messageId":"50","endLine":9,"endColumn":25},{"ruleId":"47","severity":1,"message":"56","line":9,"column":27,"nodeType":"49","messageId":"50","endLine":9,"endColumn":43},{"ruleId":"47","severity":1,"message":"57","line":11,"column":12,"nodeType":"49","messageId":"50","endLine":11,"endColumn":18},{"ruleId":"47","severity":1,"message":"58","line":11,"column":20,"nodeType":"49","messageId":"50","endLine":11,"endColumn":29},{"ruleId":"47","severity":1,"message":"59","line":13,"column":12,"nodeType":"49","messageId":"50","endLine":13,"endColumn":22},{"ruleId":"47","severity":1,"message":"60","line":13,"column":24,"nodeType":"49","messageId":"50","endLine":13,"endColumn":37},{"ruleId":"61","severity":1,"message":"62","line":70,"column":24,"nodeType":"63","messageId":"64","endLine":85,"endColumn":14},{"ruleId":"61","severity":1,"message":"65","line":89,"column":43,"nodeType":"63","messageId":"64","endLine":95,"endColumn":10},{"ruleId":"61","severity":1,"message":"65","line":101,"column":47,"nodeType":"66","messageId":"64","endLine":104,"endColumn":10},{"ruleId":"61","severity":1,"message":"65","line":106,"column":49,"nodeType":"66","messageId":"64","endLine":109,"endColumn":10},{"ruleId":"43","replacedBy":"67"},{"ruleId":"45","replacedBy":"68"},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'filesSelected' is assigned a value but never used.","'setFilesSelected' is assigned a value but never used.","'paused' is assigned a value but never used.","'setPaused' is assigned a value but never used.","'recentList' is assigned a value but never used.","'setRecentList' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'upload', 'upload'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'upload'.","FunctionExpression",["69"],["70"],"no-global-assign","no-unsafe-negation"]